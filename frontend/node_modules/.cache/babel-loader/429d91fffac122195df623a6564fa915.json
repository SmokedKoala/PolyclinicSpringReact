{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { handleResponse } from '../helpers';\nimport { appointmentService } from \"./appointment.service\";\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\nexport const authenticationService = {\n  Login,\n  logout,\n  currentUser: currentUserSubject.asObservable(),\n\n  get currentUserValue() {\n    return currentUserSubject.value;\n  }\n\n};\n\nfunction Login(email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  console.log(requestOptions);\n  return fetch(`http://localhost:8080/auth`, requestOptions).then(handleResponse).then(user => {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    currentUserSubject.next(user);\n\n    if (typeof user.cabinet === 'undefined') {\n      localStorage.setItem('currentUserRole', \"patient\");\n      console.log(user);\n      localStorage.setItem(\"appointments\", appointmentService.GetAppointmentsListForPatient(user.id));\n    } else {\n      localStorage.setItem('currentUserRole', \"doctor\");\n      console.log(user);\n      localStorage.setItem(\"appointments\", appointmentService.GetAppointmentsListForDoctor(user.id));\n    }\n\n    return user;\n  });\n}\n\n_c = Login;\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('currentUser');\n  currentUserSubject.next(null);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/user/Desktop/java/PolyclinicSpringReact/frontend/src/services/authentication.service.js"],"names":["BehaviorSubject","handleResponse","appointmentService","currentUserSubject","JSON","parse","localStorage","getItem","authenticationService","Login","logout","currentUser","asObservable","currentUserValue","value","email","password","requestOptions","method","headers","body","stringify","console","log","fetch","then","user","setItem","next","cabinet","GetAppointmentsListForPatient","id","GetAppointmentsListForDoctor","removeItem"],"mappings":"AAAA,SAASA,eAAT,QAAgC,MAAhC;AAEA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAAQC,kBAAR,QAAiC,uBAAjC;AAEA,MAAMC,kBAAkB,GAAG,IAAIH,eAAJ,CAAoBI,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAApB,CAA3B;AAEA,OAAO,MAAMC,qBAAqB,GAAG;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,MAFiC;AAGjCC,EAAAA,WAAW,EAAER,kBAAkB,CAACS,YAAnB,EAHoB;;AAIjC,MAAIC,gBAAJ,GAAwB;AAAE,WAAOV,kBAAkB,CAACW,KAA1B;AAAiC;;AAJ1B,CAA9B;;AAOP,SAASL,KAAT,CAAeM,KAAf,EAAsBC,QAAtB,EAAgC;AAC5B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAe;AAACN,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAHa,GAAvB;AAKAM,EAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACA,SAAOO,KAAK,CAAE,4BAAF,EAA+BP,cAA/B,CAAL,CACFQ,IADE,CACGxB,cADH,EAEFwB,IAFE,CAEGC,IAAI,IAAI;AACVpB,IAAAA,YAAY,CAACqB,OAAb,CAAqB,aAArB,EAAoCvB,IAAI,CAACiB,SAAL,CAAeK,IAAf,CAApC;AACAvB,IAAAA,kBAAkB,CAACyB,IAAnB,CAAwBF,IAAxB;;AACA,QAAI,OAAOA,IAAI,CAACG,OAAZ,KAAwB,WAA5B,EAAwC;AACpCvB,MAAAA,YAAY,CAACqB,OAAb,CAAqB,iBAArB,EAAwC,SAAxC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACApB,MAAAA,YAAY,CAACqB,OAAb,CAAqB,cAArB,EAAqCzB,kBAAkB,CAAC4B,6BAAnB,CAAiDJ,IAAI,CAACK,EAAtD,CAArC;AACH,KAJD,MAIO;AACHzB,MAAAA,YAAY,CAACqB,OAAb,CAAqB,iBAArB,EAAwC,QAAxC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACApB,MAAAA,YAAY,CAACqB,OAAb,CAAqB,cAArB,EAAqCzB,kBAAkB,CAAC8B,4BAAnB,CAAgDN,IAAI,CAACK,EAArD,CAArC;AACH;;AACD,WAAOL,IAAP;AACH,GAfE,CAAP;AAgBH;;KAvBQjB,K;;AAyBT,SAASC,MAAT,GAAkB;AACd;AACAJ,EAAAA,YAAY,CAAC2B,UAAb,CAAwB,aAAxB;AACA9B,EAAAA,kBAAkB,CAACyB,IAAnB,CAAwB,IAAxB;AACH","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\n\r\nimport { handleResponse } from '../helpers';\r\nimport {appointmentService} from \"./appointment.service\";\r\n\r\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n\r\nexport const authenticationService = {\r\n    Login,\r\n    logout,\r\n    currentUser: currentUserSubject.asObservable(),\r\n    get currentUserValue () { return currentUserSubject.value }\r\n};\r\n\r\nfunction Login(email, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({email, password})\r\n    };\r\n    console.log(requestOptions);\r\n    return fetch(`http://localhost:8080/auth`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            localStorage.setItem('currentUser', JSON.stringify(user));\r\n            currentUserSubject.next(user);\r\n            if (typeof user.cabinet === 'undefined'){\r\n                localStorage.setItem('currentUserRole', \"patient\");\r\n                console.log(user)\r\n                localStorage.setItem(\"appointments\", appointmentService.GetAppointmentsListForPatient(user.id));\r\n            } else {\r\n                localStorage.setItem('currentUserRole', \"doctor\");\r\n                console.log(user)\r\n                localStorage.setItem(\"appointments\", appointmentService.GetAppointmentsListForDoctor(user.id));\r\n            }\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    currentUserSubject.next(null);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}