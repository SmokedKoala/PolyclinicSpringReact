{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\java\\\\PolyclinicSpringReact\\\\frontend\\\\src\\\\components\\\\mainPage\\\\main_page.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UsersList() {\n  _s();\n\n  const [users, setUsers] = useState(false);\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  function getUsers() {\n    fetch('http://localhost:3001').then(async response => {\n      return await response.json();\n    }).then(data => {\n      setUsers(data);\n    });\n  }\n\n  function createUser() {\n    let name = prompt('Enter user name');\n    let email = prompt('Enter user email');\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  function updateUser(id) {\n    let name = prompt('Enter user name');\n    let email = prompt('Enter user email');\n    fetch(`http://localhost:3001/users/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  function deleteUser(id) {\n    fetch(`http://localhost:3001/users/${id}`, {\n      method: 'DELETE'\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: users ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.userInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There is no user data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n\n_s(UsersList, \"QE/LEQenXXkpUR6LHjK6Kp5p0gg=\");\n\n_c = UsersList;\nexport default UsersList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"sources":["C:/Users/user/Desktop/java/PolyclinicSpringReact/frontend/src/components/mainPage/main_page.component.jsx"],"names":["useEffect","useState","UsersList","users","setUsers","getUsers","fetch","then","response","json","data","createUser","name","prompt","email","method","headers","body","JSON","stringify","text","alert","updateUser","id","deleteUser","map","user","classes","userInfo"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nfunction UsersList() {\r\n  const [users, setUsers] = useState(false);\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  function getUsers() {\r\n    fetch('http://localhost:3001')\r\n    .then(async response => {\r\n      return await response.json();\r\n    })\r\n    .then(data => {\r\n      setUsers(data);\r\n    });\r\n  }\r\n\r\n  function createUser() {\r\n    let name = prompt('Enter user name');\r\n    let email = prompt('Enter user email');\r\n\r\n    fetch('http://localhost:3001/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({name, email}),\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  function updateUser(id) {\r\n    let name = prompt('Enter user name');\r\n    let email = prompt('Enter user email');\r\n\r\n    fetch(`http://localhost:3001/users/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({name, email}),\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  function deleteUser(id) {\r\n    fetch(`http://localhost:3001/users/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div>\r\n          {users ?\r\n              (\r\n                  <div >\r\n                    {users.map(user => (\r\n                        <div className={classes.userInfo}>\r\n                          <span >{user.id}</span>\r\n                          <span >{user.name}</span>\r\n                          <span >{user.email}</span>\r\n                        </div>\r\n                    ))}\r\n                  </div>\r\n              ) : (\r\n                  <p>There is no user data available</p>\r\n              )\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default UsersList;\r\n"]},"metadata":{},"sourceType":"module"}