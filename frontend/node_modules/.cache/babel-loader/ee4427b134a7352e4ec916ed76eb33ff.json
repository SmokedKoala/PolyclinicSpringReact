{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\java\\\\PolyclinicSpringReact\\\\frontend\\\\src\\\\components\\\\mainPage\\\\main_page.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport classes from \"../userslist/UsersList.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPageComponent() {\n  _s();\n\n  const [users, setUsers] = useState(false);\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  function getUsers() {\n    fetch('http://localhost:3001').then(async response => {\n      return await response.json();\n    }).then(data => {\n      setUsers(data);\n    });\n  }\n\n  function createUser() {\n    let name = prompt('Enter user name');\n    let email = prompt('Enter user email');\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  function updateUser(id) {\n    let name = prompt('Enter user name');\n    let email = prompt('Enter user email');\n    fetch(`http://localhost:3001/users/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  function deleteUser(id) {\n    fetch(`http://localhost:3001/users/${id}`, {\n      method: 'DELETE'\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      alert(data);\n      getUsers();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: users ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.usersList,\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.userInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.userId,\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.userName,\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.userMail,\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateUser(user.id),\n            className: classes.updateButton,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteUser(user.id),\n            className: classes.deleteButton,\n            children: \"Delete user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There is no user data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createUser,\n      className: classes.addButton,\n      children: \"Add user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MainPageComponent, \"QE/LEQenXXkpUR6LHjK6Kp5p0gg=\");\n\n_c = MainPageComponent;\nexport default MainPageComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPageComponent\");","map":{"version":3,"sources":["C:/Users/user/Desktop/java/PolyclinicSpringReact/frontend/src/components/mainPage/main_page.component.jsx"],"names":["useEffect","useState","classes","MainPageComponent","users","setUsers","getUsers","fetch","then","response","json","data","createUser","name","prompt","email","method","headers","body","JSON","stringify","text","alert","updateUser","id","deleteUser","usersList","map","user","userInfo","userId","userName","userMail","updateButton","deleteButton","addButton"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport classes from \"../userslist/UsersList.module.css\";\r\n\r\nfunction MainPageComponent() {\r\n  const [users, setUsers] = useState(false);\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  function getUsers() {\r\n    fetch('http://localhost:3001')\r\n    .then(async response => {\r\n      return await response.json();\r\n    })\r\n    .then(data => {\r\n      setUsers(data);\r\n    });\r\n  }\r\n\r\n  function createUser() {\r\n    let name = prompt('Enter user name');\r\n    let email = prompt('Enter user email');\r\n\r\n    fetch('http://localhost:3001/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({name, email}),\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  function updateUser(id) {\r\n    let name = prompt('Enter user name');\r\n    let email = prompt('Enter user email');\r\n\r\n    fetch(`http://localhost:3001/users/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({name, email}),\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  function deleteUser(id) {\r\n    fetch(`http://localhost:3001/users/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n    .then(response => {\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      alert(data);\r\n      getUsers();\r\n    });\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div>\r\n          {users ?\r\n              (\r\n                  <div className={classes.usersList}>\r\n                    {users.map(user => (\r\n                        <div className={classes.userInfo}>\r\n                          <span className={classes.userId}>{user.id}</span>\r\n                          <span className={classes.userName}>{user.name}</span>\r\n                          <span className={classes.userMail}>{user.email}</span>\r\n                          <button onClick={() => updateUser(user.id)} className={classes.updateButton}>Update</button>\r\n                          <button onClick={() => deleteUser(user.id)} className={classes.deleteButton}>Delete user</button>\r\n                        </div>\r\n                    ))}\r\n                  </div>\r\n              ) : (\r\n                  <p>There is no user data available</p>\r\n              )\r\n          }\r\n        </div>\r\n\r\n        <button onClick={createUser} className={classes.addButton}>Add user</button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default MainPageComponent;\r\n"]},"metadata":{},"sourceType":"module"}